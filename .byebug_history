c
flagged_email
c
member
c
s
flagged_email
c
User.find_by_email("joe").nil?
User.find_by_email("joe")
emails
s
emails
n
s
current_user
@project
c
User.find_by_email("joe")
flash
@project.errors.full_messages
@project.errors
@project.members.try!(:push, User.where(email: "joe"))
@project.try!(:push, User.where(email: "joe"))
@project.try(:push, User.where(email: "joe"))
@project.try(:push, User.where(email: joe))
params[:emails].split(/\s*[ ,]\s*/)
"red    blue".split(/\s*[ ,]\s*/)
"red  ;  blue".split(/\s*[ ,]\s*/)
"red  ;  blue".split(/\s*[ ,;]\s*/)
"red  ,  blue".split(/\s*[ ,]\s*/)
"red    blue".split(/\s*[ ,]\s*/)
"red    blue".split(/\s*,\s*/)
"red ,   blue".split(/\s*,\s*/)
"red ,blue".split(/\s*,\s*/)
"   email email2".strip
"   email ".strip
params[:emails]
params[:emails}
members
c
project.todos
project
c
member.id
member
exit
member.id
member
exit
user_params[:avatar]
user_params[:avatar].nil?
exit
user_params[:avatar].nil?
user_params[:avatar]
exit
user_params[:avatar]
@user.avatar
@user
user_params
c
step_params
@step.done
@step
c
s
step_params
@step
exit
c
comment.author
author
exit
progress
progress[:total_done_count]
progress
exit
progress
progress = project.todos_progress
progress
project.todos_progress
project
progress
progree
exit
comment.author.name || comment.author.email
comment.author
comment
author
c
s
n
s
project_params
@project
c
project_params
c
Project.new(project_params)
project_params
User.find(params[:author_id])
User.find(params[:id])
User.all
params[:author_id]
params[:description]
params[:title]
params.title
params
p = Project.new(params)
params
p = Project.new(project_params)
self.params
params
project_params
p = Project.create!(project_params)
params
quit
User.all.projects <<quit
User.last
ryan
User.all
Project.all
Project
ryan
ryans_project
c
BCrypt::Password.create(password).to_s
BCrypt::Password.create(password)
BCrypt::Password.new(user.password_digest).is_password?(password)
BCrypt::Password.new(self.password_digest).is_password?(password)
user.password_digest
user
password
user.is_password?(password)
user = User.find_by_email(email)
@user
n
params[:user][:password]
params[:user][:email]
c
@user.errors.full_messages
c
@user.errors.full_messages
user.errors.full_messages
c
user.errors.full_messages
c
user.errors.full_messages
c
params
